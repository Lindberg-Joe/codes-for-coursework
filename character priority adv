#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include<math.h>

#define LETTER	0
#define DIGIT	1
#define POINT	2
#define OTHER	3
#define POWER	4
#define PLUS	5
#define  MINUS	6
#define ClassNo 100 
#define ClassOther 200
#define EndState -1

int counter=0;

int w, n, p, e, d;
int Class;
int ICON;
double FCON;
int ForI = 1000; //整型或浮点型标志
static int CurrentState;
char lc1;
char lc2;
char nextcha;
int flag=5000; //正负标志
char *stri;

# define ID 0
# define IF 1
# define THEN 2
# define ELSE 3
# define WHILE 4
# define BEGIN 5
# define END 6
# define INT 7
# define FOR 8
# define DO 9
# define LT 10
# define LE 11
# define EQ 12
# define NE 13
# define GT 14
# define GE 15
# define IS 16
# define PL 17
# define MI 18
# define MU 19
# define DI 20
# define AN 21 //增加逻辑运算符&，|
# define OR 22
# define LFBK 23
# define RTBK 24

//# define + 0		
//# define - 1		
//# define * 2		
//# define / 3	
//# define ( 4		
//# define ) 5		
//# define i 6		
//# define # 7		
//# define E 8		
//# define T 9			
//# define F 10		

#define RIGHT 1
#define ERROR 0
#define MAXINPUT 300
#define MAXSTACK 100
#define STARTSYMBOL 'S'

/* 建立保留字表 */
#define MAX_KEY_NUMBER 20  /*关键字的数量*/
#define KEY_WORD_END "waiting for your expanding"  /*关键字结束标记*/
char *KeyWordTable[MAX_KEY_NUMBER]={ "if", "then", "else", "while", "begin", "end" , "int" , "for", "do" , KEY_WORD_END};
/* 查保留字表，判断是否为关键字 */

#define PRO_STEN_END "waiting for your expanding"  /*关键字结束标记*/
char *ProStenTable[MAX_KEY_NUMBER]={"T", "E+T", "E-T", "F", "T*F", "T/F" , "i" , "(E)", KEY_WORD_END};

char TOKEN[MAXINPUT];
int stack[MAXINPUT];
int k;
int as[MAXINPUT];
int fa=0;
int step=0;
char ste[MAXINPUT];
char sta[MAXINPUT];
int table[8][8]={
	{1,1,-1,-1,-1,1,-1,1},
	{1,1,-1,-1,-1,1,-1,1},
	{1,1,1,1,-1,1,-1,1},
	{1,1,1,1,-1,1,-1,1},
	{-1,-1,-1,-1,-1,0,-1},
	{1,1,1,1,2,1,2,1},
	{1,1,1,1,2,1,2,1},
	{-1,-1,-1,-1,-1,2,-1,2}};
int ef=1000;		//语法error flag
int wf=1000;		//词法error flag
char arr[20];
int ai=0;
int rf=0;			//reducation flag

void report_error(void);
void scanner_example(FILE *fp,FILE *fw);
int GetChar(int j);
int EXECUTE(int state, int symbol,FILE* fw);
int LEX(FILE *fp,FILE *fw,char cha);
void report_error();
int lookup(char *token);
void out(int a,char*wordin);
void Octa(FILE *fp,FILE *fw);
int HandleOtherWord(void);
int HandleError(void);

int IsHigherThan(int x, int y);  /* priority detection */
int IsLowerThan(int x, int y);  /* priority detection */
int IsEqualTo(int x, int y);    /* priority detection */
int Reduce(int begin, int end, int len);
int IsVt(int l);  /* determine if stack symbol is in Vt */
int parser(FILE *fp,FILE *ft);
void change(int x,int y);						//输出符号栈
void word(FILE *fp,FILE *ft);									//词法分析
void readandputall(FILE *fp,FILE *ft);			//输出剩余串

void main()
{
	FILE *p,*w;
	p=fopen("test.txt", "r");
	w=fopen("out.txt", "w");
	printf("步骤\t Stack\t 输入串\n");
	if(parser(p,w)) printf("Succeed!\n");
	else printf("Error!\n");

}

void readandputall(FILE *fp,FILE *ft)
{
	char getw;
	int fc;
	fc=0;									//文件字符计数,退指针用
	if(rf==1&&as[fa-1]!=7) fseek(fp,-1,1);	//输出已经进行词法分析但未进入符号栈的字符
	while ((getw = fgetc(fp)) != EOF) {
		arr[ai]=getw;
		ai++;
		fc++;
	}
	fseek(fp,-fc,1);
	if(rf==1&&as[fa-1]!=7) fseek(fp,1,1);	//还原指针位置
	arr[ai]='#';	
	printf("%s\n",arr);
	for(int oo=0;oo<=ai;oo++){				//初始化arr
		arr[oo]='\0';
	}
	ai=0;
}

void word(FILE *fp,FILE *fw)
{
	wf=0;
	char fir;
	while ((fir = fgetc(fp)) != EOF) {
		if (fir == ' '|| fir == '\n'|| fir == '\t') continue; else if(fir!='#') fseek(fp,-1,1);
		if(fir=='#') 
		{
			while(1)
			{
				fir = fgetc(fp);
				if(fir=='#') 
					break;
			}
			continue;//应回到循环最开始处，非继续执行
		}
			scanner_example(fp,fw);
			break;
	}//while
	if((fir==EOF)){as[fa]=7; fa++;}
	if(wf==1) word(fp,fw);//如此次词法分析单词有误，输出error后略过，再次调用词法分析
}

void scanner_example(FILE *fp,FILE *fw)
{
	char ch; int i, c;
	ch = fgetc(fp);
	if (ch>='a'&&ch<='z')  /*it must be a identifer!*/
	{
		TOKEN[0] = ch; ch = fgetc(fp); i = 1;
		while ((ch >= 'a'&&ch <= 'z')|| (ch >= '0'&&ch <= '9'))
		{
			TOKEN[i] = ch; i++;
				ch = fgetc(fp);
		}
		TOKEN[i] = '\0';
		c = lookup(TOKEN);		
		if (c == 0) out(ID, TOKEN); else out(c, " ");		
		if(ch!=EOF)	fseek(fp, -1, 1); /* retract*/
	}
	else
		if(ch == '0') Octa(fp,fw);

		else if ((ch >= '1'&&ch <= '9')||ch == '.')
		{
			LEX(fp,fw,ch);
		}
		else

			switch (ch)
			{
			case '<': ch = fgetc(fp);
				if (ch == '=') out(LE, " ");
				else if (ch == '>') out(NE, " ");
				else
				{
					if(ch!=EOF) fseek(fp, -1, 1); 
					out(LT, " ");
				}
				break;
			case ':': fseek(fp, 1, 1); out(IS, " "); break;
			case '=': out(EQ, " "); break;
			case '+': out(PL, " "); break;
			case '*': out(MU, " "); break;
			case '/': out(DI, " "); break;
			case '&': out(AN, " "); break;
			case '|': out(OR, " "); break;
			case '(': out(LFBK, " "); break;
			case ')': out(RTBK, " "); break;
			case '>': ch = fgetc(fp);
				if (ch == '=') out(GE, " ");
				else
				{
					if(ch!=EOF) fseek(fp, -1, 1);
					out(GT, " ");
				}
				break;
			case '-':fseek(fp,-3,1); lc1=fgetc(fp); lc2=fgetc(fp);if(lc2=='='||lc2=='>'||lc2=='<'){flag=1; fseek(fp,1,1);} else {fseek(fp,-1,1);out(MI, " "); stri="(MI, )\n"; fputs(stri,fw);} break;
			default: report_error(); break;
			}
	return;
}
int GetChar(int j)
{
	int c;
	c = TOKEN[j];
	if (c >= '0'&&c <= '9') { d = c - '0'; return DIGIT; }
	if (c == '.') return POINT;
	if (c == 'E' || c == 'e') return POWER;
	if (c == '+') return PLUS;
	if (c == '-') return MINUS;
	return OTHER;
}
int EXECUTE(int state, int symbol,FILE* fw)
{
	switch (state)
	{
	case 0: switch (symbol)
	{
	case DIGIT:n = 0; p = 0; e = 1; w = d; CurrentState = 1; Class = ClassNo; break;
	case POINT:w = 0; n = 0; p = 0; e = 1; CurrentState = 3; Class = ClassNo; break;
	default: HandleOtherWord(); Class = ClassOther;
		CurrentState = EndState;
	}
			break;
	case 1: switch (symbol)
	{
	case DIGIT:w = w * 10 + d; break;
	case POINT:CurrentState = 2;  break;
	case POWER:CurrentState = 4; break;
	default: ICON = w; CurrentState = EndState; if(flag==1) {ICON*=-1; flag=5000;} printf("(INT,%d)\n", ICON);  as[fa]=6; fa++; fprintf(fw,"(INT,%d)\n",ICON);
	}
			break;
	case 2: switch (symbol)
	{
	case DIGIT:n++; w = w * 10 + d; break;
	case POWER:CurrentState = 4; break;
	default: FCON = w * pow(10, e*p - n); CurrentState = EndState; if(flag==1) {FCON*=-1; flag=5000;} printf("(REAL,%g)\n", FCON);  as[fa]=6; fa++; fprintf(fw,"(REAL,%g)\n",FCON);
	}
			break;
	case 3:switch (symbol)
	{
	case DIGIT:n++; w = w * 10 + d; CurrentState = 2; break;
	default: HandleError(); CurrentState = EndState;
	}
		   break;
	case 4:switch (symbol)
	{
	case DIGIT:p = p * 10 + d; CurrentState = 6; break;
	case MINUS:e = -1; CurrentState = 5; break;
	case PLUS:CurrentState = 5; break;
	default:HandleError(); CurrentState = EndState;
	}
		   break;
	case 5:switch (symbol)
	{
	case DIGIT:p = p * 10 + d; CurrentState = 6; break;
	default:HandleError(); CurrentState = EndState;
	}
		   break;
	case 6:switch (symbol)
	{
	case DIGIT:p = p * 10 + d; break;
	default:FCON = w * pow(10, e*p - n); CurrentState = EndState; if(flag==1) {FCON*=-1; flag=5000;} printf("(REAL,%g)\n", FCON); as[fa]=6; fa++; fprintf(fw,"(REAL,%g)\n",FCON);
	}
		   break;
	}
	return CurrentState;
}
int LEX(FILE *fp,FILE *fw,char cha)
{
	int i = 0;
	for (int j = 0;; j++) {
		if ((cha <= '9'&&cha >= '0') || cha=='E'|| cha=='-'|| cha=='.')
		{
			TOKEN[i] = cha;
			i++;
			cha = fgetc(fp);
		}
		else break;
	}
	int ch;
	CurrentState = 0;
	j = 0;
	while (CurrentState != EndState)
	{
		ch = GetChar(j);
		EXECUTE(CurrentState, ch,fw);
		j++;
	}
	if(cha!=EOF)
		fseek(fp, -1, 1);
	return Class;
}

int lookup(char *token)
{
	int n = 0;
	while (strcmp(KeyWordTable[n], KEY_WORD_END)) /*strcmp比较两串是否相同，若相同返回0*/
	{
		if (!strcmp(KeyWordTable[n], token)) /*比较token所指向的关键字和保留字表中哪个关键字相符*/
		{
			return n + 1; /*根据单词分类码表I，设置正确的关键字类别码，并返回此类别码的值*/
			break;
		}
		n++;
	}
	return 0; /*单词不是关键字，而是标识符*/
}

void out(int a,char*wordin)
{
	switch(a)
	{
		case ID:printf("(ID,%s)\n",wordin); as[fa]=6; fa++; break;
		//case INT:printf("(INT,%s)\n",wordin);break;
		case LT:printf("(LT,%s)\n",wordin);break;
		case LE:printf("(LE,%s)\n",wordin);break;
		case EQ:printf("(EQ,%s)\n",wordin);break;
		case NE:printf("(NE,%s)\n",wordin);break;
		case GT:printf("(GT,%s)\n",wordin);break;
		case GE:printf("(GE,%s)\n",wordin);break;
		case IS:printf("(IS,%s)\n",wordin);break;
		case PL:printf("(PL,%s)\n",wordin); as[fa]=0; fa++; break;
		case MI:printf("(MI,%s)\n",wordin); as[fa]=1; fa++; break;
		case MU:printf("(MU,%s)\n",wordin); as[fa]=2; fa++; break;
		case AN:printf("(AN,%s)\n",wordin);break;
		case OR:printf("(OR,%s)\n",wordin);break;
		case DI:printf("(DI,%s)\n",wordin); as[fa]=3; fa++; break;
		case IF:printf("(IF,%s)\n",wordin);break;
		case THEN:printf("(THEN,%s)\n",wordin);break;
		case ELSE:printf("(ELSE,%s)\n",wordin);break;
		case WHILE:printf("(WHILE,%s)\n",wordin);break;
		case BEGIN:printf("(BEGIN,%s)\n",wordin);break;
		case END:printf("(END,%s)\n",wordin);break;
		case INT:printf("(INT,%s)\n",wordin);break;
		case FOR:printf("(FOR,%s)\n",wordin);break;
		case DO:printf("(DO,%s)\n",wordin);break;
		case LFBK:printf("(LFBK,%s)\n",wordin); as[fa]=4; fa++; break;
		case RTBK:printf("(RTBK,%s)\n",wordin); as[fa]=5; fa++; break;
	}
}

void Octa(FILE *fp,FILE *fw)
{
	int j=0;
	int i=0;
	int sum=0;
	char cha = fgetc(fp);
	char wordin[20];
	for(j=0;;j++){
		if(cha <= '7' && cha >= '0'){
			wordin[i] = cha-'0';
			cha = fgetc(fp);
			i++;
		}
		else break;
	}
	i--;
	int c=i;
	j=0;
	for(;i>=0;i--){
		wordin[i]*=pow(8,j);
		j++;
	}
	for(i=0;i<=c;i++){
		sum+=wordin[i];
	}
    fprintf(fw,"(OCTAL,%d)\n",sum);
	printf("(OCTAL,%d)\n",sum);
	//if(cha!=EOF)
	//	fseek(fp, -1, 1);
}

int parser(FILE *fp,FILE *ft)
{
	int i, r, NewVn;  /* NewVn holds left side of a production */
	i = 0; k = 0;  /* i, k is index of a[ ] and stack[ ] separately */
	stack[0] = 7;//#
	change(0,k);
	printf("%d\t %s\t %s\t\n",counter,sta,ste);
	do
	{
		int j;
		rf=0;
		word(fp,ft);
		r = as[step++];
		if (IsVt(stack[k])) j = k; else j = k - 1;
		while (IsHigherThan(stack[j], r))
		{
			int q; 
			do {
				q = stack[j];
				if (IsVt(stack[j - 1])) j--; else j -= 2;
			} while (!IsLowerThan(stack[j], q));
			NewVn = Reduce(j, k-1, k - j);
			k = j + 1;           /* reduce the leftmost prime phrase */
			stack[k] = NewVn;  /* it is stack[j+1] stack[j+2] … stack[k] */
			change(0,k);
			rf=1;
			printf("%d\t %s\t",++counter,sta);
			readandputall(fp,ft);
		} /*end of while*/
		if ((IsLowerThan(stack[j], r) || IsEqualTo(stack[j], r))||(r==7 &&stack[j]==7)){
				stack[++k] = r;
				rf=0;
				change(0,k);
			    printf("%d\t %s\t",++counter,sta);
				readandputall(fp,ft);
				}
		else return ERROR;
	} while (r != 7);//#
	if(stack[1]==9) printf("%d\t #E\t #\t\n",++counter);
	else if(stack[1]==10) {printf("%d\t #T\t #\t\n",++counter);printf("%d\t #E\t #\t\n",++counter);}
	return RIGHT;
}

int IsHigherThan(int x, int y)
{ 
	if(table[x][y]==1) return 1;
	else return 0;
}

int IsLowerThan(int x, int y)
{ 
	if(table[x][y]==-1) return 1;
	else return 0;
}

int IsEqualTo(int x, int y)
{ 
	if(table[x][y]==0) return 1;
	else return 0;
}

int Reduce(int begin, int end, int len) //只返回一个Vn
{
	int n = 0;
	int ns=0;
	char sten[10];
	for(int h=begin;h<=end;h++){
		switch(as[h]){
			case 0:sten[ns]='+'; ns++;break;
			case 1:sten[ns]='-'; ns++;break;
			case 2:sten[ns]='*'; ns++;break;
			case 3:sten[ns]='/'; ns++;break;
			case 4:sten[ns]='('; ns++;break;
			case 5:sten[ns]=')'; ns++;break;
			case 6:sten[ns]='i'; ns++;break;
			case 7:sten[ns]='#'; ns++;break;
			case 8:sten[ns]='E'; ns++;break;
			case 9:sten[ns]='T'; ns++;break;
			case 10:sten[ns]='F'; ns++;break;
		}
	}
	if(len==3){
		if(sten[1]=='+'||sten[1]=='-') return 8;
		else if(sten[1]=='*'||sten[1]=='/') return 9;
		else if(sten[0]=='(') return 10;
	}
	else if(sten[0]=='T') return 8;
	else if(sten[0]=='F') return 9;
	else if(sten[0]=='i') return 10;
}

void change(int x,int y)
{
	for(int ee=0;ee<MAXINPUT;ee++)
	{
		sta[ee]='\0';
	}
	int ta;
	ta=0;
	for(ee=x;ee<=y;ee++){
		switch(stack[ee]){
			case 0:sta[ta]='+'; ta++; break;
			case 1:sta[ta]='-'; ta++; break;
			case 2:sta[ta]='*'; ta++; break;
			case 3:sta[ta]='/'; ta++; break;
			case 4:sta[ta]='('; ta++; break;
			case 5:sta[ta]=')'; ta++; break;
			case 6:sta[ta]='i'; ta++; break;
			case 7:sta[ta]='#'; ta++; break;
			case 8:sta[ta]='E'; ta++; break;
			case 9:sta[ta]='T'; ta++; break;
			case 10:sta[ta]='F'; ta++; break;
		}	
	}

}

int IsVt(int l)
{
	if(l<=7 && l>=0) return 1;
	else return 0;
}

void report_error()
{
	wf=1;
	printf("Word Error!\n");
}

int HandleOtherWord(void)
{
	return ClassOther;
}
int HandleError(void)
{
	printf("Error\n");
	return 0;
}

