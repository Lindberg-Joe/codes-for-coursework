1
package test;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.Arrays;
import java.io.*;

public class Server {
    public static void main(String a[]) throws Exception{
        int port=55533;
        ServerSocket server=new ServerSocket(port);
        System.out.println("server将一直等待连接的到来");
        Socket socket =server.accept();
        OutputStream outputStream = socket.getOutputStream();
        outputStream.write("Verifying Server!".getBytes("UTF-8"));
        //socket.shutdownOutput();

        InputStream inputStream=socket.getInputStream();
        byte[] bytes=new byte[1024];
        int len;
        StringBuilder sb=new StringBuilder();
        int i=0;
        while(i<3) {
            //while ((len = inputStream.read(bytes)) != -1) {
                len=inputStream.read(bytes);
                sb=new StringBuilder();
                sb.append(new String(bytes, 0, len, "UTF-8"));
            //}
            if(sb.toString().compareTo("123abc")!=0){
                outputStream = socket.getOutputStream();
                outputStream.write("PassWord Wrong!".getBytes("UTF-8"));
                //outputStream.close();
                i++;
            }
            else break;
        }
        if(i==3){
            len=inputStream.read(bytes);
            sb=new StringBuilder();
            sb.append(new String(bytes, 0, len, "UTF-8"));
            outputStream = socket.getOutputStream();
            outputStream.write("Illegal User!".getBytes("UTF-8"));
            inputStream.close();
            outputStream.close();
            socket.close();
            server.close();
        }
        else{
            outputStream = socket.getOutputStream();
            outputStream.write("Registration Successful!".getBytes("UTF-8"));
            inputStream.close();
            outputStream.close();
            socket.close();
            server.close();
        }
    }
}

package test;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.Arrays;
import java.io.*;
public class Clint {
    public static void main(String args[]) throws Exception {
        String host = "127.0.0.1";
        int port = 55533;
        Socket socket = new Socket(host, port);
        OutputStream outputStream = socket.getOutputStream();
        InputStream inputStream = socket.getInputStream();
        Scanner sc = new Scanner(System.in);
        byte[] bytes = new byte[1024];
        int len;
        StringBuilder sb = new StringBuilder();
        //len = inputStream.read(bytes);
        //while ((len = inputStream.read(bytes)) != -1) {
            len=inputStream.read(bytes);
            sb.append(new String(bytes, 0, len, "UTF-8"));
        //}
        if(sb.toString().compareTo("Verifying Server!")!=0)
        {
            System.out.println("Server Wrong!");
            inputStream.close();
            outputStream.close();
            socket.close();
        }
        else
        {
            while(true) {
                System.out.println("Please enter your PassWord");
                String str;
                str = sc.nextLine();
                outputStream.write(str.getBytes("UTF-8"));
                //outputStream.close();
                //while ((len = inputStream.read(bytes)) != -1) {
                    len=inputStream.read(bytes);
                    sb=new StringBuilder();
                    sb.append(new String(bytes, 0, len, "UTF-8"));
                //}
                if(sb.toString().compareTo("PassWord Wrong!")==0) {System.out.println(sb.toString());continue;}
                else if(sb.toString().compareTo("Illegal User!")==0)
                    {
                        System.out.println("Illegal User!");
                        inputStream.close();
                        outputStream.close();
                        socket.close();
                        break;
                    }
                else
                    {
                        System.out.println("Registration Successful!");
                        inputStream.close();
                        outputStream.close();
                        socket.close();
                        break;
                    }
            }
        }
    }
}
