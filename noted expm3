#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include<math.h>
#include<cstdlib>

#define LETTER	0
#define DIGIT	1//x3=x1*1+(abc+2);x2=x3/20E-2;
#define POINT	2
#define OTHER	3
#define POWER	4
#define PLUS	5
#define  MINUS	6
#define ClassNo 100 
#define ClassOther 200
#define EndState -1

//# define ( 0		
//# define ) 1		
//# define + 2		
//# define - 3	
//# define * 4		
//# define / 5		
//# define i 6		
//# define # 7		
//# define E 8		
//# define T 9			//文法中符号的数值对照，我用的C语言编译器不支持将单个符号	
//# define F 10			//定义为常数名称，故以注释形式写出，代码中直接使用数字

int ACTION[16][8]={				//ACTION表
	{4,-1,-1,-1,-1,-1,5,-1},	//-1为error状态
	{-1,-1,6,7,-1,-1,-1,100},	//0-15的数值代表S0-S15
	{-1,23,23,23,8,9,-1,23},	//21-28的数值代表R1-R8
	{-1,26,26,26,26,26,-1,26},
	{4,-1,-1,-1,-1,-1,5,-1,},
	{-1,28,28,28,28,28,-1,28},
	{4,-1,-1,-1,-1,-1,5,-1},
	{4,-1,-1,-1,-1,-1,5,-1},
	{4,-1,-1,-1,-1,-1,5,-1},
	{4,-1,-1,-1,-1,-1,5,-1},
	{-1,15,6,7,-1,-1,-1,-1},
	{-1,21,21,21,8,9,-1,21},
	{-1,22,22,22,8,9,-1,22},
	{-1,24,24,24,24,24,-1,24},
	{-1,25,25,25,25,25,-1,25},
	{-1,27,27,27,27,27,-1,27}
	};

int GOTO[16][3]={		//GOTO表
	{1,2,3},			//-1为error状态
	{-1,-1,-1},			//0-15的数值代表S0-S15
	{-1,-1,-1},
	{-1,-1,-1},
	{10,2,3},
	{-1,-1,-1},
	{-1,11,3},
	{-1,12,3},
	{-1,-1,13},
	{-1,-1,14},
	{-1,-1,-1},
	{-1,-1,-1},
	{-1,-1,-1},
	{-1,-1,-1},
	{-1,-1,-1},
	{-1,-1,-1}
};

int w, n, p, e, d;	//词法分析中数值部分所需变量定义		
int Class;
int ICON;
double FCON;
int ForI = 1000;	//Float or Integer整型或浮点型标志
static int CurrentState;
char lc1;	//当前位置前一个符号
char lc2;	//当前位置前第二个符号
char nextcha;//当前位置下一个符号
int flag=5000; //正负标志，用于识别有符号数
char *stri;

# define ID 0
# define IF 1
# define THEN 2
# define ELSE 3
# define WHILE 4
# define BEGIN 5
# define END 6
# define INT 7
# define FOR 8
# define DO 9
# define LT 10
# define LE 11
# define EQ 12
# define NE 13
# define GT 14
# define GE 15
# define IS 16
# define PL 17
# define MI 18
# define MU 19
# define DI 20
# define AN 21 //增加逻辑运算符&，|
# define OR 22
# define LFBK 23
# define RTBK 24

# define S0 0	//0-15的数值代表S0-S15
# define S1 1
# define S2 2
# define S3 3
# define S4 4
# define S5 5
# define S6 6
# define S7 7
# define S8 8
# define S9 9
# define S10 10
# define S11 11
# define S12 12
# define S13 13
# define S14 14
# define S15 15

#define MAX 60
/* 建立保留字表 */
#define MAX_KEY_NUMBER 20  /*关键字的数量*/
#define KEY_WORD_END "waiting for your expanding"  /*关键字结束标记*/
char *KeyWordTable[MAX_KEY_NUMBER]={ "if", "then", "else", "while", "begin", "end" , "int" , "for", "do" , KEY_WORD_END};
/* 查保留字表，判断是否为关键字 */

char TOKEN[MAX];
int stacks[MAX];	//状态栈
int s=0;			//index of stacks状态栈指针
int as;				//保存刚刚进行词法分析的单词
int stackx[MAX];	//符号栈
int x=0;			//index of stackx
int ef=1000;		//语法错误标志error flag
int wf=1000;		//词法错误标志word error flag
int TopStat,InpSym;	//栈顶状态，输入符号
int len=0;			//将规约的产生式右侧的长度
int leng;			//输入串加#的长度
int counter=1;		//步骤计数器
char arr[MAX];		//输出文件中剩余串所用的字符串
int ai=0;			//index of arr
int rf=0;			//reducation flag归约状态标志，用于readandputall函数，输出已经进行词法分析但未进入符号栈的字符

#define ERROR -1
#define Acc 100

extern void report_error(void);
void scanner_example(FILE *fp,FILE *fw);
int GetChar(int j);
int EXECUTE(int state, int symbol,FILE* fw);
int LEX(FILE *fp,FILE *fw,char cha);
void report_error();
int lookup(char *token);
void out(int a,char*wordin);	//输出词法分析结果函数
void Octa(FILE *fp,FILE *fw);	//识别八进制函数
int HandleOtherWord(void);
int HandleError(void);

char valuesta[MAX][10];		//变量值及常数栈，以字符串形式存储
int idxofv=0;				//index of valuesta
typedef struct {			//结构体，用于存储变量和中间结果的名称和值
				char name[MAX];
                char val[MAX];
				} vaStr;
vaStr ids[MAX];		//变量栈
int idxofid=0;		//index of ids
vaStr results[MAX];	//中间结果栈
int idxofres=0;		//index of results
int lookupforid();	//查变量表函数
int c=0;

void controller(FILE *fp,FILE *ft,FILE *fw);	//驱动程序
void push();									//进栈
void advance(FILE *fp,FILE *fw);				//前进
void act(int k);								//归约出栈
void change(int x,int y);						//输出符号栈
void word(FILE *fp,FILE *fw);					//词法分析
void readandputall(FILE *fp,FILE *ft);			//输出文件中剩余串
void wordforids(FILE *fp,FILE *fw);				//填变量表函数
void subforadd();	//加法生成式归约子程序
void subformin();	//减法生成式归约子程序
void subformul();	//乘法生成式归约子程序
void subfordif();	//除法生成式归约子程序
char res[5];		//中间结果暂存字符串
int inr='1';		//用于生成结果名字，结果名字形如R1，R2等

void main()
{
	FILE *p,*w,*t;//语义分析部分采用属性翻译文法，默认第一个单词为变量名，第二个单词为‘=’
	p=fopen("test.txt", "r");//‘=’号以后语句沿用实验二中给出的文法，故先填表、翻译‘=’后调用语法分析程序分析后续语句
	w=fopen("out.txt", "w"); //由于个人精力有限，没有按照属性翻译文法重新制表，所以采用此种方法，有些偷懒，请老师见谅
	stackx[0]=7;//#压栈
	x++;
	char fir;
	while ((fir = fgetc(p)) != EOF)	//以;为语句之间的分隔符，每条语句调用一次语义分析
	{
		counter=1;
		memset(valuesta,NULL, sizeof(valuesta));//初始化各个栈
		memset(stacks,'\0', sizeof(stacks));
		memset(stackx,'\0',sizeof(stacks));
		as=0;
		printf("\n步骤\t\t符号栈\t\t剩余串\n");//打印表头
		fseek(p,-1,1);
		wordforids(p,w);//填表
		strcpy(ids[idxofid].name,TOKEN);	
		fgetc(p);
		printf("(EQ, )\n");
		controller(p,t,w);c++;
		strcpy(ids[idxofid].val,valuesta[idxofv-1]);
		printf("四元式：( = , %s , 0 , %s )\n",ids[idxofid].val,ids[idxofid].name);
		idxofid++;
	}
	fclose(p);
	fclose(w);
}

int lookupforid()//查变量表函数，如变量存在，返回在变量栈中的位置，如不存在，返回-1
{
    int pro;
	pro=1;
	for(int i=0;i<idxofid;i++)
	{
		pro=strcmp(TOKEN,ids[i].name);
		if(pro==0) return i;
	}
	return -1;
}

void readandputall(FILE *fp,FILE *ft)		//输出文件中剩余串
{
	char getw;
	int fc;		//我曾尝试过同时在一个文件中定义两个读指针，使用后发现两个指针的位置是同步的，故写此函数使用一个指针进行分析和输出
	fc=0;		//文件字符计数,记录字符数，退指针用 file char counter
	if(rf==1&&as!=7) fseek(fp,-1,1);	//输出已经进行词法分析但未进入符号栈的字符
	while ((getw = fgetc(fp)) != EOF) {
		if(getw==10) fc++;		//如文件中有换行符（ASCII码=10），占两个文件指针位置，每出现一次需特地多退一位
		arr[ai]=getw;
		ai++;
		fc++;
	}
	fseek(fp,-fc,1);
	if(rf==1&&as!=7) fseek(fp,1,1);	//还原指针位置
	arr[ai]='#';	
	printf("%s\n",arr);
	for(int oo=0;oo<=ai;oo++){		//初始化arr
		arr[oo]='\0';
	}
	ai=0;
}

void word(FILE *fp,FILE *fw)//词法分析函数，一次读一个单词
{
	memset(TOKEN, 0, sizeof(TOKEN));
	char con[20];
	wf=0;
	char fir;
	while ((fir = fgetc(fp)) != ';') {
		if (fir == ' '|| fir == '\r'|| fir == '\t'|| fir == '\n'||fir == 10) continue; else if(fir!='#') fseek(fp,-1,1);
		if(fir=='#') //删除以#开头以#结尾的注释
		{
			while(1)
			{
				fir = fgetc(fp);
				if(fir=='#') 
					break;
			}
			continue;//应回到循环最开始处，非继续执行
		}
			scanner_example(fp,fw);
			break;
	}//while
	if(fir==';') as=7;
	if(wf==1) word(fp,fw);//如此次词法分析单词有误，输出error后再次调用词法分析，略过错误单词
}

void scanner_example(FILE *fp,FILE *fw)
{
	char ch; int i, c;
	ch = fgetc(fp);
	if (ch>='a'&&ch<='z')  /*it must be a identifer!*/
	{
		TOKEN[0] = ch; ch = fgetc(fp); i = 1;
		while ((ch >= 'a'&&ch <= 'z')|| (ch >= '0'&&ch <= '9'))
		{
			TOKEN[i] = ch; i++;
				ch = fgetc(fp);
		}
		TOKEN[i] = '\0';
		c = lookup(TOKEN);		
		if (c == 0) 
		{
			out(ID, TOKEN);
			c=lookupforid();//查表，如存在使该变量的值入栈，如不存在报变量未定义错误，用变量名代替值入栈
			if(c==-1) {printf("Undefined id %s!\n",TOKEN); strcpy(valuesta[idxofv],TOKEN);idxofv++;}
			else {strcpy(valuesta[idxofv],ids[c].val);idxofv++;}
		}else out(c, " "); 	
		if(ch!=EOF)	fseek(fp, -1, 1); /* retract*/
	}
	else
		if(ch == '0') Octa(fp,fw);//八进制

		else if ((ch >= '1'&&ch <= '9')||ch == '.')
		{
			ICON=0;
			FCON=0;
			n = 0; p = 0; e = 0; w = 0;
			LEX(fp,fw,ch);
		}
		else

			switch (ch)
			{
			case '<': ch = fgetc(fp);
				if (ch == '=') out(LE, " ");
				else if (ch == '>') out(NE, " ");
				else
				{
					if(ch!=EOF) fseek(fp, -1, 1); 
					out(LT, " ");
				}
				break;
			case ':': fseek(fp, 1, 1); out(IS, " "); break;
			case '=': out(EQ, " "); break;
			case '+': out(PL, " "); break;
			case '*': out(MU, " "); break;
			case '/': out(DI, " "); break;
			case '&': out(AN, " "); break;
			case '|': out(OR, " "); break;
			case '(': out(LFBK, " "); break;
			case ')': out(RTBK, " "); break;
			case '>': ch = fgetc(fp);
				if (ch == '=') out(GE, " ");
				else
				{
					if(ch!=EOF) fseek(fp, -1, 1);
					out(GT, " ");
				}
				break;//判断‘-’是负号还是减号
			case '-':fseek(fp,-3,1); lc1=fgetc(fp); lc2=fgetc(fp);if(lc2=='='||lc2=='>'||lc2=='<'||lc2=='+'||lc2=='-'||lc2=='*'||lc2=='/'){flag=1; fseek(fp,1,1);ch=fgetc(fp);LEX(fp,fw,ch);} else {fseek(fp,-1,1);out(MI, " "); stri="(MI, )\n"; fputs(stri,fw);} break;
			case';':break;
			default: report_error(); break;
			}
	return;
}

int GetChar(int j)
{
	int c;
	c = TOKEN[j];
	if (c >= '0'&&c <= '9') { d = c - '0'; return DIGIT;}
	if (c == '.') return POINT;
	if (c == 'E' || c == 'e') return POWER;
	if (c == '+') return PLUS;
	if (c == '-') return MINUS;
	return OTHER;
}
int EXECUTE(int state, int symbol,FILE* fw)
{
	switch (state)
	{
	case 0: switch (symbol)
	{
	case DIGIT:n = 0; p = 0; e = 1; w = d; CurrentState = 1; Class = ClassNo; break;
	case POINT:w = 0; n = 0; p = 0; e = 1; CurrentState = 3; Class = ClassNo; break;
	default: HandleOtherWord(); Class = ClassOther;
		CurrentState = EndState;
	}
			break;
	case 1: switch (symbol)
	{
	case DIGIT:w = w * 10 + d; break;
	case POINT:CurrentState = 2;  break;
	case POWER:CurrentState = 4; break;
	default: ICON = w; CurrentState = EndState; if(flag==1) {ICON*=-1; flag=5000;} printf("(INT,%d)\n", ICON); as=6;  itoa(ICON,valuesta[idxofv],10); idxofv++;  fprintf(fw,"(INT,%d)\n",ICON);
	}
			break;
	case 2: switch (symbol)
	{
	case DIGIT:n++; w = w * 10 + d; break;
	case POWER:CurrentState = 4; break;
	default: FCON = w * pow(10, e*p - n); CurrentState = EndState; if(flag==1) {FCON*=-1; flag=5000;} printf("(REAL,%g)\n", FCON);  as=6; gcvt(FCON,5,valuesta[idxofv]); idxofv++; fprintf(fw,"(REAL,%g)\n",FCON);
	}
			break;
	case 3:switch (symbol)
	{
	case DIGIT:n++; w = w * 10 + d; CurrentState = 2; break;
	default: HandleError(); CurrentState = EndState;
	}
		   break;
	case 4:switch (symbol)
	{
	case DIGIT:p = p * 10 + d; CurrentState = 6; break;
	case MINUS:e = -1; CurrentState = 5; break;
	case PLUS:CurrentState = 5; break;
	default:HandleError(); CurrentState = EndState;
	}
		   break;
	case 5:switch (symbol)
	{
	case DIGIT:p = p * 10 + d; CurrentState = 6; break;
	default:HandleError(); CurrentState = EndState;
	}
		   break;
	case 6:switch (symbol)
	{
	case DIGIT:p = p * 10 + d; break;
	default:FCON = w * pow(10, e*p - n); CurrentState = EndState; if(flag==1) {FCON*=-1; flag=5000;} printf("(REAL,%g)\n", FCON); as=6;  gcvt(FCON,5,valuesta[idxofv]); idxofv++; fprintf(fw,"(REAL,%g)\n",FCON);
	}
		   break;
	}
	return CurrentState;
}
int LEX(FILE *fp,FILE *fw,char cha)
{
	for(int y=0;y<MAX;y++)
	{
		TOKEN[y]='\0';
	}
	int i = 0;
	for (int j = 0;; j++) {
		if ((cha <= '9'&&cha >= '0') || cha=='E'|| cha=='-'|| cha=='.')
		{
			TOKEN[i] = cha;
			i++;
			cha = fgetc(fp);
		}
		else break;
	}
	int ch;
	CurrentState = 0;
	j = 0;
	while (CurrentState != EndState)
	{
		ch = GetChar(j);
		EXECUTE(CurrentState, ch,fw);
		j++;
	}
	if(cha!=EOF)
		fseek(fp, -1, 1);
	return Class;
}

int lookup(char *token)
{
	int n = 0;
	while (strcmp(KeyWordTable[n], KEY_WORD_END)) /*strcmp比较两串是否相同，若相同返回0*/
	{
		if (!strcmp(KeyWordTable[n], token)) /*比较token所指向的关键字和保留字表中哪个关键字相符*/
		{
			return n + 1; /*根据单词分类码表I，设置正确的关键字类别码，并返回此类别码的值*/
			break;
		}
		n++;
	}
	return 0; /*单词不是关键字，而是标识符*/
}

void wordforids(FILE *fp,FILE *fw)
{
	char fir;
	while (1) {
		fir = fgetc(fp);
		if (fir == ' '|| fir == '\r'|| fir == '\t'|| fir == '\n'||fir == 10) continue; else if(fir!='#') {fseek(fp,-1,1);break;}
		if(fir=='#') //删除以#开头以#结尾的注释
		{
			while(1)
			{
				fir = fgetc(fp);
				if(fir=='#') 
					break;
			}
			continue;//应回到循环最开始处，非继续执行
		}
			break;
	}//while
	char ch; int i, c;
	ch = fgetc(fp);
	if (ch>='a'&&ch<='z')  /*it must be a identifer!*/
	{
		TOKEN[0] = ch; ch = fgetc(fp); i = 1;
		while ((ch >= 'a'&&ch <= 'z')|| (ch >= '0'&&ch <= '9'))
		{
			TOKEN[i] = ch; i++;
				ch = fgetc(fp);
		}
		TOKEN[i] = '\0';
		if(ch!=EOF)	fseek(fp, -1, 1); /* retract*/
	}
	while (1) {
		fir = fgetc(fp);
		if (fir == ' '|| fir == '\r'|| fir == '\t'|| fir == '\n'||fir == 10) continue; else {fseek(fp,-1,1); break;}
		if(fir=='#') //删除以#开头以#结尾的注释
		{
			while(1)
			{
				fir = fgetc(fp);
				if(fir=='#') 
					break;
			}
			continue;//应回到循环最开始处，非继续执行
		}
			break;
	}//while
}

void out(int a,char*wordin)		//输出词法分析结果
{
	switch(a)
	{
		case ID:printf("(ID,%s)\n",wordin); as=6; break; //存储代表变量名的数值
		case LT:printf("(LT,%s)\n",wordin);break;
		case LE:printf("(LE,%s)\n",wordin);break;
		case EQ:printf("(EQ,%s)\n",wordin);break;
		case NE:printf("(NE,%s)\n",wordin);break;
		case GT:printf("(GT,%s)\n",wordin);break;
		case GE:printf("(GE,%s)\n",wordin);break;
		case IS:printf("(IS,%s)\n",wordin);break;
		case PL:printf("(PL,%s)\n",wordin); as=2;  break; //存储代表‘+’的数值
		case MI:printf("(MI,%s)\n",wordin); as=3;  break; //存储代表‘-’的数值
		case MU:printf("(MU,%s)\n",wordin); as=4;  break; //存储代表‘*’的数值
		case AN:printf("(AN,%s)\n",wordin);break;
		case OR:printf("(OR,%s)\n",wordin);break;
		case DI:printf("(DI,%s)\n",wordin); as=5; break; //存储代表‘/’的数值
		case IF:printf("(IF,%s)\n",wordin);break;
		case THEN:printf("(THEN,%s)\n",wordin);break;
		case ELSE:printf("(ELSE,%s)\n",wordin);break;
		case WHILE:printf("(WHILE,%s)\n",wordin);break;
		case BEGIN:printf("(BEGIN,%s)\n",wordin);break;
		case END:printf("(END,%s)\n",wordin);break;
		case INT:printf("(INT,%s)\n",wordin);break;
		case FOR:printf("(FOR,%s)\n",wordin);break;
		case DO:printf("(DO,%s)\n",wordin);break;
		case LFBK:printf("(LFBK,%s)\n",wordin); as=0; break; //存储代表‘(‘的数值
		case RTBK:printf("(RTBK,%s)\n",wordin); as=1; break; //存储代表‘)’的数值
	}
}

void Octa(FILE *fp,FILE *fw)		//识别八进制符号
{
	int j=0;
	int i=0;
	int sum=0;
	char cha = fgetc(fp);
	char wordin[20];
	for(j=0;;j++){
		if(cha <= '7' && cha >= '0'){
			wordin[i] = cha-'0';
			cha = fgetc(fp);
			i++;
		}
		else break;
	}
	i--;
	int c=i;
	j=0;
	for(;i>=0;i--){
		wordin[i]*=pow(8,j);
		j++;
	}
	for(i=0;i<=c;i++){
		sum+=wordin[i];
	}
    fprintf(fw,"(OCTAL,%d)\n",sum);
	printf("(OCTAL,%d)\n",sum);
	fseek(fp, -1, 1);
}

void controller(FILE *fp,FILE *ft,FILE *fw)		//LR分析表驱动程序
{	
	ef=100;
	stacks[s]=0;
	TopStat=stacks[s];
	s++;
	word(fp,fw);//第一次调用词法分析程序
	InpSym=as;
	while(ACTION[TopStat][InpSym]!=Acc)
	{
		rf=0;
		if(ACTION[TopStat][InpSym]==ERROR)
		{
			printf("Grammar Error!\n");
			ef=1;
			break;
		}
		else if(ACTION[TopStat][InpSym]<=15&&ACTION[TopStat][InpSym]>=0)
			{
				push();
				change(0,x);//将栈中整型转换为字符串并输出
				readandputall(fp,ft);//输出剩余串
				advance(fp,fw);//移进调用词法分析程序
			}
			else if(ACTION[TopStat][InpSym]<=28&&ACTION[TopStat][InpSym]>=21)
				{
					rf=1;//置归约标志为1
					act(ACTION[TopStat][InpSym]-20);//归约函数，与出栈函数pop合并
					change(0,x-1);//将栈中整型转换为字符串并输出
					readandputall(fp,ft);//输出剩余串
				}
	}
	if(ef==1) printf("输入串有误，分析失败\n");
}

void push()//进栈
{
	stacks[s]=ACTION[TopStat][InpSym];
	stackx[x]=InpSym;
}

void advance(FILE *fp,FILE *fw)//移进
{
	TopStat=stacks[s];
	word(fp,fw);//调用词法分析程序
	InpSym=as;
	s++;
	x++;
}

void act(int k)//归约
{
	res[0]='R';
	switch(k)//k为产生式编号
	{
		case 1:len=3; x-=len; stackx[x]=8; subforadd(); break;//	+
		case 2:len=3; x-=len; stackx[x]=8; subformin(); break;//	-
		case 3:len=1; x-=len; stackx[x]=8; break;		//
		case 4:len=3; x-=len; stackx[x]=9; subformul(); break;//	*
		case 5:len=3; x-=len; stackx[x]=9; subfordif(); break;//	/
		case 6:len=1; x-=len; stackx[x]=9; break;		//
		case 7:len=3; x-=len; stackx[x]=10;break;		//
		case 8:len=1; x-=len; stackx[x]=10;break;		//
	}		

	for(int j=1;j<=len;j++)//出栈
	{
		stacks[s-len]=0;
	}
	s=s-len;
	stacks[s]=GOTO[stacks[s-1]][stackx[x]-8];
	TopStat=stacks[s];
	InpSym=as;
	s++;
	x++;
}

void subforadd()//加法生成式归约子程序
{
	res[1]=inr; 
	inr++; 
	char temp[10];
	printf("\n四元式：( + , %s , %s , %s )\n",valuesta[idxofv-2],valuesta[idxofv-1],res); 
	strcpy(results[idxofres].name,res); 
	strcpy(temp,valuesta[idxofv-2]);
	strcat(temp,"+");
	strcat(temp,valuesta[idxofv-1]);
	strcpy(results[idxofres].val,temp); 
	strcpy(valuesta[idxofv-2],res);
	idxofres++;
	idxofv-=1; 
}

void subformin()//减法生成式归约子程序
{
	res[1]=inr; 
	inr++; 
	char temp[10];
	printf("\n四元式：( - , %s , %s , %s )\n",valuesta[idxofv-2],valuesta[idxofv-1],res); 
	strcpy(results[idxofres].name,res); 
	strcpy(temp,valuesta[idxofv-2]);
	strcat(temp,"-");
	strcat(temp,valuesta[idxofv-1]);
	strcpy(results[idxofres].val,temp); 
	strcpy(valuesta[idxofv-2],res);
	idxofres++;
	idxofv-=1; 
}

void subformul()//乘法生成式归约子程序
{
	res[1]=inr; 
	inr++; 
	char temp[10];
	printf("\n四元式：( * , %s , %s , %s )\n",valuesta[idxofv-2],valuesta[idxofv-1],res); 
	strcpy(results[idxofres].name,res); 
	strcpy(temp,valuesta[idxofv-2]);
	strcat(temp,"*");
	strcat(temp,valuesta[idxofv-1]);
	strcpy(results[idxofres].val,temp); 
	strcpy(valuesta[idxofv-2],res);
	idxofres++;
	idxofv-=1; 
}

void subfordif()//除法生成式归约子程序
{
	res[1]=inr; 
	inr++; 
	char temp[10];
	printf("\n四元式：( / , %s , %s , %s )\n",valuesta[idxofv-2],valuesta[idxofv-1],res); 
	strcpy(results[idxofres].name,res); 
	strcpy(temp,valuesta[idxofv-2]);
	strcat(temp,"/");
	strcat(temp,valuesta[idxofv-1]);
	strcpy(results[idxofres].val,temp); 
	strcpy(valuesta[idxofv-2],res);
	idxofres++;
	idxofv-=1; 
}

void change(int x,int y)//输出符号栈
{
	char sta[20];
	for(int ee=0;ee<20;ee++)
	{
		sta[ee]='\0';
	}
	int ta;
	ta=0;
	stackx[x+c]=7;
	for(ee=x+c;ee<=y;ee++){
		switch(stackx[ee]){
			case 0:sta[ta]='('; ta++; break;
			case 1:sta[ta]=')'; ta++; break;
			case 2:sta[ta]='+'; ta++; break;
			case 3:sta[ta]='-'; ta++; break;
			case 4:sta[ta]='*'; ta++; break;
			case 5:sta[ta]='/'; ta++; break;
			case 6:sta[ta]='i'; ta++; break;
			case 7:sta[ta]='#'; ta++; break;
			case 8:sta[ta]='E'; ta++; break;
			case 9:sta[ta]='T'; ta++; break;
			case 10:sta[ta]='F'; ta++; break;
		}	
	}
	printf("%d\t\t%s\t\t",counter,sta);
	counter++;
}

void report_error()
{
	wf=1;
	printf("Word Error!\n");
}

int HandleOtherWord(void)
{
	return ClassOther;
}
int HandleError(void)
{
	printf("Error\n");
	return 0;
}
